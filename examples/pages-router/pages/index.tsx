import type { GetServerSidePropsContext, GetServerSidePropsResult, NextApiRequest } from 'next'
import { type Session, getServerSession } from 'next-auth'
import { signIn, signOut } from 'next-auth/react'
import Head from 'next/head'
import { Fragment, useEffect } from 'react'
import { getAuthOptions } from '../auth'

interface IHomePageProps {
  // `session` property name is reserved by Next.js, so we'll use `authSession`
  authSession: Session | null
}

export default function Home({ authSession }: IHomePageProps) {
  useEffect(() => {
    if (!authSession?.user) {
      signIn()
    }
  }, [authSession])

  return (
    <Fragment>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Pages Router Example</h1>
        <p>Welcome, {authSession?.user?.name ?? 'Guest'}!</p>

        <div>
          <button type="button" onClick={() => signIn()}>
            Login
          </button>
          <button type="button" onClick={() => signOut()}>
            Logout
          </button>
        </div>

        <hr />

        {authSession && (
          <Fragment>
            <p>Your data:</p>
            <pre>{JSON.stringify(authSession, null, 2)}</pre>
          </Fragment>
        )}
      </main>
    </Fragment>
  )
}

export async function getServerSideProps(
  context: GetServerSidePropsContext
): Promise<GetServerSidePropsResult<IHomePageProps>> {
  const authSession = await getServerSession(
    context.req,
    context.res,
    getAuthOptions(context.req as NextApiRequest)
  )

  return {
    props: {
      authSession
    }
  }
}
